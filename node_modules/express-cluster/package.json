{
  "name": "express-cluster",
  "version": "0.0.2",
  "description": "Simple drop-in for express apps to spawn multiple processes",
  "main": "lib/index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Flipboard/express-cluster.git"
  },
  "scripts": {
    "prepublish": "coffee -o lib/ -c src/index.coffee"
  },
  "keywords": [
    "cluster",
    "express",
    "http",
    "https",
    "net",
    "listener"
  ],
  "author": {
    "name": "Eden Li",
    "email": "eli@flipboard.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/Flipboard/express-cluster/issues"
  },
  "homepage": "https://github.com/Flipboard/express-cluster",
  "devDependencies": {
    "coffee-script": "~1.6.3"
  },
  "readme": "# express-cluster\n\nRun an express server on multiple processes. This is meant to be dropped in\ndirectly to your main entry point without having to setup a separate script\nthat manages workers.\n\nThis actually works with any EventListener that emits the `\"close\"` event and\nhas a `close`. If it's a server object (e.g. an express app, `net.Server` or\n`http.Server`, ensure that you've invoked `listen` before returning it).\n\nBy default the module will spawn N processes where N is the number of cores you\nhave. You can (and should) configure this parameter for your environments.\n\n## Synopsis\n\n    var express = require('express');\n    var cluster = require('express-cluster')\n\n    cluster(function() {\n        var app = express();\n        app.get('/', function(req, res) {\n            res.send('ok');\n        });\n        return app.listen(0xbeef);\n    }, {count: 5})\n\n## Configuration options\n\n    {\n        count: 5,       // number of workers to spawn: defaults to CPU core count\n        respawn: true,  // respawn process on exit: defaults to true\n        verbose: false  // log what happens to console: defaults to false\n\n\t// Attach the given function to each spawned worker. The function will\n\t// be bound to the worker that sent the message so you can setup a two\n\t// way message bus if you please. See examples/messaging.js for an\n\t// example.\n\tworkerListener: function(){}\n    }\n",
  "readmeFilename": "README.md",
  "_id": "express-cluster@0.0.2",
  "dist": {
    "shasum": "b51f92036bc8c335afcf399592438373527b40b0"
  },
  "_from": "express-cluster@0.0.2",
  "_resolved": "http://registry.npmjs.org/express-cluster/-/express-cluster-0.0.2.tgz"
}
